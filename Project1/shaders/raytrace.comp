#version 430

layout (local_size_x = 16, local_size_y = 16) in;

layout (rgba32f, binding = 0) uniform image2D outImg;

uniform int uWidth;
uniform int uHeight;

// Camera
uniform vec3 uCamPos;
uniform vec3 uCamFront;
uniform vec3 uCamUp;
uniform float uFovY;

void main() {
    ivec2 pix = ivec2(gl_GlobalInvocationID.xy);
    if (pix.x >= uWidth || pix.y >= uHeight) return;

    // Build a simple camera basis
    vec3 forward = normalize(uCamFront);
    vec3 right   = normalize(cross(forward, uCamUp));
    vec3 up      = normalize(cross(right, forward));

    // NDC in [-1,1]
    float nx = ( (float(pix.x) + 0.5) / float(uWidth) ) * 2.0 - 1.0;
    float ny = ( (float(pix.y) + 0.5) / float(uHeight)) * 2.0 - 1.0;
    ny = -ny; // flip Y to match screen space

    float aspect = float(uWidth) / float(uHeight);
    float tanHalf = tan(radians(uFovY) * 0.5);
    vec3 dir = normalize(forward + nx * aspect * tanHalf * right + ny * tanHalf * up);

    // Simple sky gradient based on direction
    float t = 0.5 * (dir.y + 1.0);
    vec3 sky = mix(vec3(0.7, 0.8, 1.0), vec3(0.05, 0.07, 0.1), t);

    imageStore(outImg, pix, vec4(sky, 1.0));
}

