#version 430 core

layout(local_size_x = 16, local_size_y = 16) in;

layout(rgba32f, binding = 0) uniform image2D destTex;

uniform vec3 uCamPos;
uniform vec3 uCamFront;
uniform vec3 uCamUp;
uniform float uFov;
uniform float uAspect;

// Simple checkerboard ground plane.  This is only a placeholder to
// demonstrate GPU ray tracing; it can be replaced with a full scene
// traversal in the future.
vec3 traceRay(vec3 origin, vec3 dir)
{
    float t = (-origin.y) / dir.y;
    if (t <= 0.0)
        return vec3(0.1);

    vec3 hit = origin + dir * t;
    float checker = step(0.5, fract(hit.x * 0.5) + fract(hit.z * 0.5));
    return mix(vec3(0.2), vec3(0.8), checker);
}

void main()
{
    ivec2 pix = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(destTex);
    if (pix.x >= size.x || pix.y >= size.y)
        return;

    float px = (float(pix.x) / float(size.x) * 2.0 - 1.0) * uAspect * tan(radians(uFov * 0.5));
    float py = (1.0 - float(pix.y) / float(size.y) * 2.0) * tan(radians(uFov * 0.5));

    vec3 right = normalize(cross(uCamFront, uCamUp));
    vec3 up = normalize(cross(right, uCamFront));
    vec3 dir = normalize(uCamFront + px * right + py * up);

    vec3 color = traceRay(uCamPos, dir);
    imageStore(destTex, pix, vec4(color, 1.0));
}

