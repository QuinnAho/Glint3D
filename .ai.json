{
  "version": "1.0.0",
  "description": "AI interaction configuration for Glint3D",
  "architecture": {
    "type": "layered",
    "enforcement": "automated",
    "constraints_file": "ai-meta/constraints.json",
    "validation_tool": "tools/arch_check.py"
  },
  "ai_entry_points": {
    "primary": [
      "sdk/web/glint3d.ts",
      "schemas/json_ops_v2.json",
      "ai-meta/intent_map.json"
    ],
    "secondary": [
      "engine/src/json_ops.cpp",
      "platforms/desktop/main.cpp",
      "platforms/web/src/App.tsx"
    ],
    "forbidden": [
      "engine/Libraries/",
      "node_modules/",
      "builds/"
    ]
  },
  "layer_rules": {
    "engine": {
      "may_import_from": ["engine", "external"],
      "may_not_import_from": ["platforms", "ui", "sdk"],
      "ai_guidance": "Core graphics engine. Avoid modifications unless absolutely necessary."
    },
    "platforms": {
      "may_import_from": ["engine", "external"],
      "may_not_import_from": ["ui", "sdk"],
      "ai_guidance": "Platform-specific code. Modify for OS integration or build system changes."
    },
    "sdk": {
      "may_import_from": ["schemas"],
      "may_not_import_from": ["engine", "platforms", "ui"],
      "ai_guidance": "Primary AI interface. Use this layer for adding new functionality."
    },
    "ui": {
      "may_import_from": ["sdk", "platforms"],
      "may_not_import_from": ["engine"],
      "ai_guidance": "User interface code. Safe to modify for UX improvements."
    },
    "schemas": {
      "may_import_from": [],
      "may_not_import_from": ["*"],
      "ai_guidance": "Contract definitions. Changes here require careful versioning."
    }
  },
  "development_workflow": {
    "before_changes": [
      "Read ai-meta/intent_map.json for relevant entry points",
      "Check ai-meta/constraints.json for applicable rules",
      "Understand the target layer's purpose and dependencies"
    ],
    "during_changes": [
      "Make minimal, focused changes",
      "Follow existing code patterns and naming conventions",
      "Update schemas if adding new operations",
      "Add tests for new functionality"
    ],
    "after_changes": [
      "Run python tools/arch_check.py to validate architecture",
      "Ensure all tests pass",
      "Update ai-meta/ files if architecture changed"
    ]
  },
  "intent_system": {
    "preferred_approach": "Use SDK intents over direct engine calls",
    "schema_validation": "All operations validated against schemas/",
    "extension_pattern": "Add intent to SDK → implement in engine → update schema",
    "testing_strategy": "Each intent has integration tests in tests/"
  },
  "common_tasks": {
    "add_new_feature": {
      "entry_point": "sdk/web/glint3d.ts",
      "pattern": "Define intent → implement handler → add tests → update schema",
      "example": "ai-meta/intent_map.json:scene_manipulation"
    },
    "fix_rendering_bug": {
      "entry_point": "engine/src/render_system.cpp",
      "pattern": "Identify issue → add test case → fix implementation → validate",
      "example": "ai-meta/intent_map.json:rendering_output"
    },
    "improve_ui": {
      "entry_point": "platforms/web/src/ or ui/",
      "pattern": "Update UI → ensure SDK integration → test workflow",
      "example": "ai-meta/intent_map.json:lighting_control"
    },
    "add_new_platform": {
      "entry_point": "platforms/",
      "pattern": "Create platform dir → implement interface → update build",
      "example": "platforms/desktop/ structure"
    }
  },
  "guidelines": {
    "safety": [
      "Never modify files in engine/Libraries/ (third-party code)",
      "Always validate architectural constraints before committing",
      "Use asset root restriction for file operations",
      "Avoid direct OpenGL calls outside RHI layer"
    ],
    "performance": [
      "Desktop budget: 16ms frame time, 2GB memory",
      "Web budget: 33ms frame time, 512MB memory",
      "Measure performance impact of changes",
      "Consider both raster and ray rendering paths"
    ],
    "maintainability": [
      "Prefer SDK intents over low-level operations",
      "Keep changes atomic and focused",
      "Update documentation and tests together with code",
      "Follow established naming conventions"
    ]
  },
  "testing": {
    "required": [
      "Unit tests for new engine functionality",
      "Integration tests for new intents",
      "Golden image tests for rendering changes",
      "Security tests for file operations"
    ],
    "validation_commands": [
      "python tools/arch_check.py",
      "tests/scripts/run_all_tests.sh",
      "cmake --build builds/desktop/cmake",
      "cd platforms/web && npm run build"
    ]
  },
  "metadata": {
    "reasoning_doc": "ai-meta/reasoning.md",
    "constraints_doc": "ai-meta/constraints.json",
    "intent_map": "ai-meta/intent_map.json",
    "changelog": "ai-meta/changelog.json",
    "nonfunctional_reqs": "ai-meta/non_functional.json"
  }
}