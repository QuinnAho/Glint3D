id: FEAT-0243
title: MaterialCore Unified BSDF System
owner: ai
status: planned
created: "2025-09-11T14:30:00Z"
priority: high

description: >
  Eliminate dual material storage (PBR + legacy Material) that causes conversion 
  drift between raster and ray pipelines. Introduce single MaterialCore struct 
  used by both pipelines to ensure consistent material behavior.

acceptance_criteria:
  - "SceneObject has single MaterialCore field, no dual PBR/legacy storage"
  - "Raytracer uses MaterialCore directly, no PBR→legacy conversion"
  - "Rasterizer shaders consume MaterialCore uniforms"
  - "Material properties identical between pipelines (unit tests)"
  - "Existing materials render identically (SSIM >= 0.995)"

must_requirements:
  - ARCH.UNIFIED_MATERIALS
  - API.BACKWARD_COMPATIBILITY
  - TEST.GOLDEN_SSIM
  - DET.SEED_REPRO
  - TEST.CROSS_PLATFORM

plan:
  - id: PR1
    title: "Define MaterialCore struct and BSDF interface"
    status: planned
    files: ["engine/include/glint3d/material_core.h"]
  - id: PR2
    title: "Update SceneObject to use MaterialCore instead of dual storage"
    status: planned
    files: ["engine/include/scene_object.h", "engine/src/scene_manager.cpp"]
  - id: PR3
    title: "Migrate raytracer to consume MaterialCore directly"
    status: planned  
    files: ["engine/src/raytracer.cpp"]
  - id: PR4
    title: "Update rasterizer shaders for MaterialCore uniforms"
    status: planned
    files: ["engine/shaders/material_uniforms.glsl", "engine/shaders/pbr.frag"]
  - id: PR5
    title: "Update JSON Ops material parsing to MaterialCore"
    status: planned
    files: ["engine/src/json_ops.cpp", "schemas/json_ops_v1.json"]

file_whitelist:
  - "engine/include/glint3d/material_core.h"
  - "engine/include/scene_object.h"
  - "engine/src/scene_manager.cpp"
  - "engine/src/raytracer.cpp"
  - "engine/src/json_ops.cpp"
  - "engine/shaders/material_uniforms.glsl"
  - "engine/shaders/pbr.frag"
  - "engine/shaders/standard.frag"
  - "schemas/json_ops_v1.json"
  - "tests/unit/material_core_test.cpp"
  - "tests/integration/material_consistency_test.cpp"
  - "docs/materials.md"
  - "ai/tasks/FEAT-0243/**"

outputs:
  - engine/include/glint3d/material_core.h
  - Updated SceneObject with unified materials
  - Updated shaders with MaterialCore uniforms
  - Unit tests for BSDF calculations

metrics:
  material_consistency_error: 0.001  # Max difference between pipelines
  conversion_elimination: 1.0        # 100% of conversions removed
  api_simplification: 0.5            # 50% fewer material-related functions

dependencies:
  blocks: [FEAT-0241]  # SSR-T depends on MaterialCore
  blocked_by: [FEAT-0242]  # Depends on RHI for shader uniform management

current_problems:
  - "SceneObject has both Material and PBR fields causing inconsistency"
  - "PBR→Material conversion loses precision and introduces drift"
  - "Raster and ray pipelines see different material values"
  - "Material property changes require updating two separate fields"
  - "Debugging material issues requires checking multiple structs"

target_architecture: >
  Single MaterialCore struct containing all BSDF parameters used by both
  raster and ray pipelines. No conversions, no drift, consistent behavior.
  Clean separation between material data and rendering implementation.