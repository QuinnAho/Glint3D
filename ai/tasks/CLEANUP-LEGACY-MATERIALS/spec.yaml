id: CLEANUP-LEGACY-MATERIALS
title: Remove Legacy Material System (Final Cleanup)
owner: future-developer
status: planned
created: "2025-09-13T18:00:00Z"
priority: medium
estimated_effort: 2-3 days

description: >
  Complete the material system unification by removing the legacy Material
  field and all associated compatibility code. This cleanup task eliminates
  the dual storage system entirely and completes the migration to MaterialCore.

context: >
  MaterialCore unification has been implemented with all rendering pipelines
  now using MaterialCore as the single source of truth. The legacy Material
  field in SceneObject is only used for backward compatibility in serialization
  and a few API bridges. This task removes the legacy system entirely.

acceptance_criteria:
  - "Remove Material field from SceneObject struct"
  - "Update all serialization to use MaterialCore directly"
  - "Remove MaterialCore::toLegacyMaterial() conversion calls"
  - "Update Raytracer API to accept MaterialCore natively"
  - "Verify all tests pass with legacy material system removed"
  - "Update JSON schema to reflect MaterialCore properties"

must_requirements:
  - ARCH.SINGLE_MATERIAL_SOURCE
  - API.BACKWARD_COMPATIBILITY_OPTIONAL
  - TEST.COMPREHENSIVE_COVERAGE

removal_checklist:
  struct_changes:
    - file: "engine/include/scene_manager.h"
      action: "Remove 'Material material;' field from SceneObject"
      marker: "ðŸš¨ DEPRECATED: Legacy material - scheduled for removal in v0.4.1"

  api_updates:
    - file: "engine/include/raytracer.h"
      action: "Change loadModel() signature to accept MaterialCore"
      current: "void loadModel(const ObjLoader&, const glm::mat4&, float, const Material&)"
      target: "void loadModel(const ObjLoader&, const glm::mat4&, float, const MaterialCore&)"

  serialization_migration:
    - file: "engine/src/scene_manager.cpp"
      action: "Replace toJson() to export MaterialCore properties"
      marker: "ðŸš¨ DEPRECATED SERIALIZATION: Using legacy Material"

    - file: "engine/src/ui_bridge.cpp"
      action: "Update UI serialization to use MaterialCore exclusively"
      marker: "ðŸš¨ DEPRECATED HYBRID: Mix of MaterialCore + legacy Material"

  conversion_removal:
    - file: "engine/src/json_ops.cpp"
      action: "Remove toLegacyMaterial() sync call"
      marker: "ðŸš¨ DEPRECATED SYNC: Auto-update legacy material"

    - file: "engine/src/render_system.cpp"
      action: "Remove MaterialCore â†’ Material conversion for raytracer"
      marker: "ðŸš¨ DEPRECATED CONVERSION: MaterialCore â†’ legacy Material"

implementation_order:
  1. "Update Raytracer API to accept MaterialCore directly"
  2. "Implement MaterialCore native serialization (saveToJSON/loadFromJSON)"
  3. "Update SceneManager::toJson() and fromJson() to use MaterialCore"
  4. "Update UI bridge serialization to use MaterialCore"
  5. "Remove all toLegacyMaterial() conversion calls"
  6. "Remove Material field from SceneObject"
  7. "Run comprehensive tests and fix any remaining issues"
  8. "Update JSON schema documentation"

schema_updates:
  - file: "schemas/json_ops_v1.json"
    additions:
      - "MaterialCore properties: baseColor, metallic, roughness, ior, transmission, thickness, emissive"
      - "Advanced properties: clearcoat, clearcoatRoughness, normalStrength"
    removals:
      - "Legacy properties: diffuse, specular, ambient, shininess (maintain for v1 compat)"

backward_compatibility:
  loading_legacy_scenes: "Support loading scenes with legacy material properties, auto-convert to MaterialCore"
  json_ops_v1: "Maintain support for legacy 'diffuse', 'specular', 'ambient' in set_material ops"
  graceful_degradation: "Unknown MaterialCore properties ignored in older versions"

testing_requirements:
  - "All existing material tests pass with MaterialCore-only system"
  - "Scene serialization roundtrip test (save â†’ load â†’ compare)"
  - "Legacy scene loading compatibility test"
  - "Raytracer integration test with MaterialCore"
  - "UI material editing functionality test"

files_to_modify:
  - "engine/include/scene_manager.h"          # Remove Material field
  - "engine/include/raytracer.h"              # Update API signature
  - "engine/src/raytracer.cpp"                # Accept MaterialCore
  - "engine/src/scene_manager.cpp"            # MaterialCore serialization
  - "engine/src/ui_bridge.cpp"                # MaterialCore UI integration
  - "engine/src/json_ops.cpp"                 # Remove legacy sync
  - "engine/src/render_system.cpp"            # Remove conversion
  - "engine/src/material_core.cpp"            # Add serialization methods
  - "schemas/json_ops_v1.json"                # Update schema

estimated_impact:
  lines_removed: "~50 lines of legacy compatibility code"
  lines_added: "~100 lines for MaterialCore serialization"
  memory_savings: "~32 bytes per SceneObject (Material struct size)"
  performance_impact: "Minimal - eliminates conversion overhead"

completion_verification:
  build_test: "Engine compiles successfully with no Material references"
  grep_test: "No instances of 'obj.material' or '.toLegacyMaterial()' in codebase"
  functionality_test: "All material editing, serialization, and rendering works correctly"
  schema_test: "JSON schema validation passes for MaterialCore properties"

notes: >
  This cleanup task should be undertaken when:
  1. MaterialCore system has been thoroughly tested in production
  2. All critical serialization workflows have been validated
  3. Developer is comfortable with potential breaking changes to saved scene files

  Benefits of completion:
  - Eliminates dual material storage confusion
  - Reduces memory usage per object
  - Simplifies material system maintenance
  - Removes conversion overhead
  - Makes MaterialCore the single source of truth

dependencies:
  completed_by: ["Material System Unification (current)"]
  enables: ["Advanced MaterialCore features", "Material system optimizations"]