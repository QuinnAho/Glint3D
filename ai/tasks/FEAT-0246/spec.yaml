id: FEAT-0246
title: Deterministic Rendering and Golden Test Suite
owner: ai
status: planned
created: "2025-09-11T14:30:00Z"
priority: high

description: >
  Implement deterministic rendering with seeded random numbers and comprehensive
  golden image test suite for regression validation. Addresses testing gaps
  identified in the refactoring plan.

acceptance_criteria:
  - "All rendering produces identical output given same seed and inputs"
  - "Golden image tests cover major rendering features and material types"
  - "SSIM comparison with threshold >= 0.995 for visual regression detection"
  - "Cross-platform golden stability (Windows/Linux/macOS)"
  - "Automated golden regeneration workflow for intentional changes"

must_requirements:
  - DET.SEED_REPRO
  - DET.GOLDEN_STABILITY
  - TEST.GOLDEN_SSIM
  - TEST.CROSS_PLATFORM
  - TEST.UNIT_COVERAGE

plan:
  - id: PR1
    title: "Implement seeded random number generation for deterministic output"
    status: planned
    files: ["engine/include/glint3d/deterministic_random.h", "engine/src/deterministic_random.cpp"]
  - id: PR2
    title: "Add seed parameter to raytracer and all random sampling"
    status: planned
    files: ["engine/src/raytracer.cpp", "engine/src/json_ops.cpp"]
  - id: PR3
    title: "Create comprehensive golden test scenes covering all features"
    status: planned
    files: ["tests/golden/scenes/**/*.json"]
  - id: PR4
    title: "Implement golden image comparison with SSIM validation"
    status: planned
    files: ["tests/golden/tools/golden_image_compare.py"]
  - id: PR5
    title: "Add CI automation for golden tests and regeneration workflow"
    status: planned
    files: [".github/workflows/golden_tests.yml"]

file_whitelist:
  - "engine/include/glint3d/deterministic_random.h"
  - "engine/src/deterministic_random.cpp"
  - "engine/src/raytracer.cpp"
  - "engine/src/json_ops.cpp"
  - "engine/src/application.cpp"
  - "tests/golden/scenes/**"
  - "tests/golden/references/**"
  - "tests/golden/tools/**"
  - "tests/scripts/run_golden_tests.sh"
  - ".github/workflows/golden_tests.yml"
  - "docs/testing_guide.md"
  - "ai/tasks/FEAT-0246/**"

outputs:
  - Deterministic random number system
  - Comprehensive golden test scenes
  - Golden image comparison tools
  - CI automation for regression testing

metrics:
  determinism_consistency: 1.0    # 100% identical output across runs
  golden_coverage_percent: 90     # 90% feature coverage
  ssim_threshold: 0.995          # Visual regression threshold
  cross_platform_stability: 0.98 # 98% golden stability

dependencies:
  blocks: []
  blocked_by: [FEAT-0243]  # Depends on MaterialCore for consistent materials

test_categories: >
  Golden Test Categories:
  1. Basic Geometry - Spheres, cubes, complex meshes
  2. Materials - PBR metals, dielectrics, glass, emissive
  3. Lighting - Point, directional, spot lights with shadows
  4. Camera - Various presets, FOV, exposure settings
  5. Rendering Modes - Raster vs ray comparison
  6. Edge Cases - Extreme values, degenerate geometry

current_problems:
  - "Floating-point precision differences cause CI failures"
  - "No comprehensive test coverage for rendering features"
  - "Manual testing required for visual regression detection"
  - "Golden regeneration is manual and error-prone"
  - "Cross-platform rendering differences not tracked"

target_architecture: >
  Deterministic rendering system with seeded randomness, comprehensive golden
  test suite covering all features, automated SSIM comparison, and CI integration
  with golden regeneration workflow. Reliable regression detection and
  cross-platform stability validation.