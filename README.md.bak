# OpenGL OBJ Viewer + Raytracer (with AI and Tools)

This is a C++ OpenGL viewer and CPU raytracer with modern qualityâ€‘ofâ€‘life tools:
- Naturalâ€‘language commands (via AI) and JSON Ops v1 scripting
- PBR (Cookâ€“Torrance) and a standard raster path
- â€œWhy is it black?â€ diagnostics with oneâ€‘click fixes
- Perf HUD coach with counters + actionable hints

Runs as a desktop app (GLFW/GLAD/ImGui). A headless path supports CLI rendering and scripted scene edits.

---

## Quick Start

- Open `Project1/Project1.vcxproj` in Visual Studio 2022 (x64).
- Build + run from the repo root so `shaders/` and `assets/` resolve.
- Use the top menu to load sample models or recipes. Hold RMB to fly the camera.

---

## Highlights

- Native OBJ loader; optional unified loader (glTF/GLB/FBX/DAE/PLY) via Assimp.
- PBR shader: BaseColor, Normal, Metallic/Roughness; Standard shader with flat/Gouraud.
- Texture cache deduplicates loads; perâ€‘object shader choice (Standard vs PBR).
- CPU raytracer with BVH; shows the result on a fullâ€‘screen quad; optional denoise.
- Shareable scene state (JSON Ops v1) + headless render CLI.

---

## New Tools (MVPs)

1) Explainâ€‘myâ€‘render: â€œWhy is it black?â€
- Detects and offers oneâ€‘click fixes:
  - Missing normals â†’ Recompute angleâ€‘weighted normals
  - Bad winding (mostly backfacing) â†’ Flip triangle order + invert normals
  - No lights / toneâ€‘mapped black â†’ Add a neutral key light
  - sRGB mismatch (PBR gamma + sRGB FB) â†’ Toggle framebuffer sRGB
- Open via the menubar button â€œWhy is it black?â€.

2) Perf Coach HUD
- Overlay shows: draw calls, total triangles, materials, textures, texture MB, geometry MB, VRAM estimate.
- Suggestions:
  - â€œX meshes share material Y â†’ instancing candidate.â€
  - High draw calls â†’ merge static meshes or instance
  - High triangle count â†’ consider LOD/decimation
- Toggle under View â†’ â€œPerf HUDâ€.
- Optional â€œAsk AI for perf tipsâ€ button when AI is enabled.

---

## Controls

- RMB + WASD/E/Q/Space/Ctrl: fly camera; RMB drag to orbit
- Gizmo: Shift+Q/W/E â†’ Translate/Rotate/Scale; X/Y/Z pick axis; L toggles Local/World; N toggles snapping
- F11: fullscreen
- Delete: delete selection

---

## Menubar

- File â†’ Load Cube / Load Plane, Copy Share Link, Toggle Settings Panel
- View â†’ Point/Wire/Solid/Raytrace, Fullscreen, Perf HUD
- Gizmo â†’ Mode, Axis, Local/Snap
- Samples â†’ Prebuilt recipes (see `assets/samples/recipes/`)
- Toolbar quick buttons: Mode, Gizmo, Add Light, Denoise, Why is it black?

---

## â€œTalk & AIâ€ Panel

- Send natural language or JSON Ops v1 lines.
- Enable â€œUse AIâ€ and configure endpoint/model to let the planner generate a plan from your request.
- Scene snapshots can be copied as JSON.

Docs: `docs/json_ops_v1.md` (schema in `schemas/json_ops_v1.json`).

---

## Headless + Scripting (CLI)

Apply JSON Ops v1 and render to PNG without a window:

- `--ops <file>`: apply JSON Ops v1 from file
- `--render <out.png>`: render to PNG (optionally with `--w`/`--h`)
- `--w <int> --h <int>`: output resolution
- `--denoise`: enable denoiser (if compiled with OIDN)

Example:
```
Project1.exe --ops recipe.json --render out.png --w 1024 --h 768
```

---

## Troubleshooting

- Black frame (raster):
  - Use â€œWhy is it black?â€ panel.
  - Add at least one light; check intensities are > 0.
  - For PBR, if colors look crushed, disable framebuffer sRGB in the panel.
  - Recompute angleâ€‘weighted normals if the model lacks normals.
  - Flip winding if the object is mostly backfacing.

- Dark/washed PBR:
  - Avoid doubleâ€‘gamma: PBR shader outputs gammaâ€‘corrected color; disable FB sRGB.

- Headless asset paths:
  - Run from repo root or provide absolute paths so `assets/` resolves.

---

## Build Notes

- Toolchain: Visual Studio 2022, C++17, x64.
- Thirdâ€‘party: GLFW, ImGui, stb, GLM under `Libraries/`.
- Optional: Assimp via vcpkg (`USE_ASSIMP`) for non-OBJ formats.
  - Include/Lib dirs and DLL steps are typical for vcpkg.

---

## Texture Compression (KTX2/Basis)

- Runtime prefers `.ktx2` next to requested PNG/JPG; if present, it loads `.ktx2`. Otherwise it falls back to STB PNG/JPG.
- KTX2 loading is optional and compiled when `ENABLE_KTX2=ON` in CMake and `libktx` is available. Without it, `.ktx2` is ignored and PNG/JPG are used.
- Offline conversion scripts:
  - Windows PowerShell: `tools/texc.ps1` (requires `toktx` in PATH)
    - Example: `powershell -ExecutionPolicy Bypass -File tools/texc.ps1 -Root Project1/assets -Mode etc1s`
  - Bash: `tools/texc.sh` (requires `toktx` in PATH)
    - Example: `bash tools/texc.sh -r Project1/assets -m etc1s -j 4`
- Recommended modes:
  - `etc1s`: smallest (good default for web, color/albedo)
  - `uastc`: higher quality (use for normals/roughness if banding appears)
- Web build: assets folder is preloaded; `.ktx2` files next to images are automatically available.

---

## Repo Layout

- `Project1/src` â€“ rendering, UI, loaders, raytracer
- `Project1/include` â€“ headers
- `Project1/shaders` â€“ GLSL
- `Project1/assets` â€“ sample models, textures, recipes
- `docs/json_ops_v1.md`, `schemas/json_ops_v1.json` â€“ scripting docs/schema

---

## Samples

Use the Samples menu or load recipes manually:
- `assets/samples/recipes/three-point-lighting.json`
- `assets/samples/recipes/isometric-hero.json`

---

## License

See repository license if present. Thirdâ€‘party components retain their respective licenses.

