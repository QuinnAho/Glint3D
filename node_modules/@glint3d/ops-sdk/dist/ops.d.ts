import type { JsonOp, JsonOps, Vec3 } from './types.js';
export * from './types.js';
export declare const ops: {
    load: (path: string, options?: {
        name?: string;
        position?: Vec3;
        scale?: Vec3;
    }) => JsonOp;
    setCamera: (position: Vec3, options?: {
        target?: Vec3;
        front?: Vec3;
        up?: Vec3;
        fov?: number;
    }) => JsonOp;
    setCameraPreset: (preset: "front" | "back" | "left" | "right" | "top" | "bottom" | "iso") => JsonOp;
    addLight: (options?: {
        type?: "point" | "directional" | "spot";
        position?: Vec3;
        direction?: Vec3;
        color?: Vec3;
        intensity?: number;
        inner_deg?: number;
        outer_deg?: number;
    }) => JsonOp;
    select: (target: string) => JsonOp;
    selectLight: (index: number) => JsonOp;
    duplicate: (source: string, name?: string) => JsonOp;
    duplicateLight: (index: number) => JsonOp;
    remove: (target: string) => JsonOp;
    removeLight: (index: number) => JsonOp;
    transform: (target: string, options: {
        mode?: "absolute" | "delta";
        position?: Vec3;
        rotation?: Vec3;
        scale?: Vec3;
    }) => JsonOp;
    setBackground: (options: {
        type: "color";
        color: Vec3;
    } | {
        type: "skybox";
        skybox: string;
    }) => JsonOp;
    render: (path?: string, options?: {
        width?: number;
        height?: number;
        samples?: number;
        denoise?: boolean;
    }) => JsonOp;
    renderImage: (path: string, options?: {
        width?: number;
        height?: number;
    }) => JsonOp;
    setExposure: (exposure: number) => JsonOp;
    setToneMapping: (mode: "linear" | "reinhard" | "filmic" | "aces") => JsonOp;
};
export declare function batch(...operations: JsonOp[]): JsonOps;
export declare function isValidVec3(value: any): value is Vec3;
export declare function isValidOperation(value: any): value is JsonOp;
export declare function isValidOperations(value: any): value is JsonOps;
export declare const patterns: {
    loadAndPlace: (path: string, position: Vec3, name?: string) => JsonOps;
    studioLighting: () => JsonOps;
    cameraOrbit: (steps?: number) => JsonOps;
};
declare const _default: {
    ops: {
        load: (path: string, options?: {
            name?: string;
            position?: Vec3;
            scale?: Vec3;
        }) => JsonOp;
        setCamera: (position: Vec3, options?: {
            target?: Vec3;
            front?: Vec3;
            up?: Vec3;
            fov?: number;
        }) => JsonOp;
        setCameraPreset: (preset: "front" | "back" | "left" | "right" | "top" | "bottom" | "iso") => JsonOp;
        addLight: (options?: {
            type?: "point" | "directional" | "spot";
            position?: Vec3;
            direction?: Vec3;
            color?: Vec3;
            intensity?: number;
            inner_deg?: number;
            outer_deg?: number;
        }) => JsonOp;
        select: (target: string) => JsonOp;
        selectLight: (index: number) => JsonOp;
        duplicate: (source: string, name?: string) => JsonOp;
        duplicateLight: (index: number) => JsonOp;
        remove: (target: string) => JsonOp;
        removeLight: (index: number) => JsonOp;
        transform: (target: string, options: {
            mode?: "absolute" | "delta";
            position?: Vec3;
            rotation?: Vec3;
            scale?: Vec3;
        }) => JsonOp;
        setBackground: (options: {
            type: "color";
            color: Vec3;
        } | {
            type: "skybox";
            skybox: string;
        }) => JsonOp;
        render: (path?: string, options?: {
            width?: number;
            height?: number;
            samples?: number;
            denoise?: boolean;
        }) => JsonOp;
        renderImage: (path: string, options?: {
            width?: number;
            height?: number;
        }) => JsonOp;
        setExposure: (exposure: number) => JsonOp;
        setToneMapping: (mode: "linear" | "reinhard" | "filmic" | "aces") => JsonOp;
    };
    batch: typeof batch;
    patterns: {
        loadAndPlace: (path: string, position: Vec3, name?: string) => JsonOps;
        studioLighting: () => JsonOps;
        cameraOrbit: (steps?: number) => JsonOps;
    };
    isValidVec3: typeof isValidVec3;
    isValidOperation: typeof isValidOperation;
    isValidOperations: typeof isValidOperations;
};
export default _default;
//# sourceMappingURL=ops.d.ts.map