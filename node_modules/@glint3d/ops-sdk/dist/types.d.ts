export type Vec3 = [number, number, number];
export interface OpLoad {
    op: "load";
    path: string;
    name?: string;
    position?: Vec3;
    scale?: Vec3;
    transform?: {
        position?: Vec3;
        scale?: Vec3;
    };
}
export interface OpSetCamera {
    op: "set_camera";
    position: Vec3;
    target?: Vec3;
    front?: Vec3;
    up?: Vec3;
    fov?: number;
    fov_deg?: number;
    near?: number;
    far?: number;
}
export interface OpAddLight {
    op: "add_light";
    type?: "point" | "directional" | "spot";
    position?: Vec3;
    direction?: Vec3;
    color?: Vec3;
    intensity?: number;
    inner_deg?: number;
    outer_deg?: number;
}
export interface OpSetBackground {
    op: "set_background";
    type: "color" | "skybox";
    color?: Vec3;
    skybox?: string;
}
export interface OpDuplicate {
    op: "duplicate";
    source: string;
    name?: string;
}
export interface OpDuplicateLight {
    op: "duplicate_light";
    index: number;
}
export interface OpTransform {
    op: "transform";
    target: string;
    mode?: "absolute" | "delta";
    transform_absolute?: {
        position?: Vec3;
        rotation?: Vec3;
        scale?: Vec3;
    };
    transform_delta?: {
        position?: Vec3;
        rotation?: Vec3;
        scale?: Vec3;
    };
}
export interface OpSelect {
    op: "select";
    type: "object" | "light";
    target?: string;
    index?: number;
}
export interface OpRemove {
    op: "remove";
    type: "object" | "light";
    target?: string;
    index?: number;
}
export interface OpSetCameraPreset {
    op: "set_camera_preset";
    preset: "front" | "back" | "left" | "right" | "top" | "bottom" | "iso";
}
export interface OpRender {
    op: "render";
    path?: string;
    width?: number;
    height?: number;
    samples?: number;
    denoise?: boolean;
}
export interface OpRenderImage {
    op: "render_image";
    path: string;
    width?: number;
    height?: number;
}
export interface OpSetExposure {
    op: "set_exposure";
    exposure: number;
}
export interface OpSetToneMapping {
    op: "set_tone_mapping";
    mode: "linear" | "reinhard" | "filmic" | "aces";
}
export type JsonOp = OpLoad | OpSetCamera | OpAddLight | OpSetBackground | OpDuplicate | OpDuplicateLight | OpTransform | OpSelect | OpRemove | OpSetCameraPreset | OpRender | OpRenderImage | OpSetExposure | OpSetToneMapping;
export type JsonOps = JsonOp | JsonOp[];
export interface SceneSnapshot {
    camera: {
        position: Vec3;
        front: Vec3;
        target?: Vec3;
        up?: Vec3;
        fov?: number;
    };
    selected: string | null;
    selectedLightIndex?: number;
    objects: Array<{
        name: string;
        triangles?: number;
        materials?: number;
    }>;
    lights: Array<{
        type: "point" | "directional" | "spot";
        position: Vec3;
        direction?: Vec3;
        color: Vec3;
        intensity: number;
        inner_deg?: number;
        outer_deg?: number;
        enabled?: boolean;
    }>;
    stats?: {
        triangles: number;
        drawCalls: number;
        materials: number;
        textures: number;
        frameTimeMs?: number;
    };
}
export interface EngineInfo {
    version: string;
    buildType: "debug" | "release";
    platform: "desktop" | "web";
    features: {
        raytracer: boolean;
        denoise: boolean;
        assimp: boolean;
        ktx2: boolean;
    };
    limits: {
        maxTriangles: number;
        maxTextureSize: number;
        maxLights: number;
    };
}
//# sourceMappingURL=types.d.ts.map