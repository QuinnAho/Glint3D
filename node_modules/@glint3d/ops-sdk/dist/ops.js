export * from './types.js';
// Utility functions for creating operations
export const ops = {
    // Model loading
    load: (path, options) => ({
        op: 'load',
        path,
        ...options
    }),
    // Camera operations
    setCamera: (position, options) => ({
        op: 'set_camera',
        position,
        ...options
    }),
    setCameraPreset: (preset) => ({
        op: 'set_camera_preset',
        preset
    }),
    // Lighting
    addLight: (options) => ({
        op: 'add_light',
        type: 'point',
        intensity: 1.0,
        color: [1, 1, 1],
        ...options
    }),
    // Object operations
    select: (target) => ({
        op: 'select',
        type: 'object',
        target
    }),
    selectLight: (index) => ({
        op: 'select',
        type: 'light',
        index
    }),
    duplicate: (source, name) => ({
        op: 'duplicate',
        source,
        ...(name && { name })
    }),
    duplicateLight: (index) => ({
        op: 'duplicate_light',
        index
    }),
    remove: (target) => ({
        op: 'remove',
        type: 'object',
        target
    }),
    removeLight: (index) => ({
        op: 'remove',
        type: 'light',
        index
    }),
    // Transformations
    transform: (target, options) => ({
        op: 'transform',
        target,
        mode: options.mode || 'delta',
        [options.mode === 'absolute' ? 'transform_absolute' : 'transform_delta']: {
            position: options.position,
            rotation: options.rotation,
            scale: options.scale
        }
    }),
    // Environment
    setBackground: (options) => ({
        op: 'set_background',
        ...options
    }),
    // Rendering
    render: (path, options) => ({
        op: 'render',
        path,
        width: 800,
        height: 600,
        ...options
    }),
    renderImage: (path, options) => ({
        op: 'render_image',
        path,
        width: 800,
        height: 600,
        ...options
    }),
    // Tone mapping
    setExposure: (exposure) => ({
        op: 'set_exposure',
        exposure
    }),
    setToneMapping: (mode) => ({
        op: 'set_tone_mapping',
        mode
    })
};
// Helper to create operation arrays
export function batch(...operations) {
    return operations;
}
// Validation helpers
export function isValidVec3(value) {
    return Array.isArray(value) &&
        value.length === 3 &&
        value.every(n => typeof n === 'number' && !isNaN(n));
}
export function isValidOperation(value) {
    return typeof value === 'object' &&
        value !== null &&
        typeof value.op === 'string';
}
export function isValidOperations(value) {
    if (isValidOperation(value))
        return true;
    if (Array.isArray(value)) {
        return value.every(isValidOperation);
    }
    return false;
}
// Common operation patterns
export const patterns = {
    // Load model and position it
    loadAndPlace: (path, position, name) => [
        ops.load(path, { name }),
        ops.setCamera([position[0] + 2, position[1] + 2, position[2] + 2], {
            target: position
        })
    ],
    // Create studio lighting setup
    studioLighting: () => [
        ops.addLight({
            type: 'directional',
            direction: [-0.5, -0.7, -0.5],
            intensity: 1.0,
            color: [1, 0.95, 0.8] // warm key light
        }),
        ops.addLight({
            type: 'directional',
            direction: [0.8, -0.2, 0.3],
            intensity: 0.3,
            color: [0.8, 0.9, 1] // cool fill light
        }),
        ops.addLight({
            type: 'directional',
            direction: [0, 0.5, -1],
            intensity: 0.5,
            color: [1, 1, 1] // rim light
        })
    ],
    // Camera presets sequence
    cameraOrbit: (steps = 8) => {
        const operations = [];
        for (let i = 0; i < steps; i++) {
            const angle = (i / steps) * Math.PI * 2;
            const radius = 3;
            operations.push(ops.setCamera([
                Math.cos(angle) * radius,
                1.5,
                Math.sin(angle) * radius
            ], { target: [0, 0, 0] }));
        }
        return operations;
    }
};
export default { ops, batch, patterns, isValidVec3, isValidOperation, isValidOperations };
//# sourceMappingURL=ops.js.map