use std::{fs, fs::File, io::Write, path::Path};

fn ensure_icon() {
    let dir = Path::new("icons");
    let path = dir.join("icon.ico");
    if path.exists() { return; }
    let _ = fs::create_dir_all(dir);
    // Minimal 1x1 32bpp ICO (white pixel with full alpha)
    const ICO: [u8; 70] = [
        0x00,0x00, 0x01,0x00, 0x01,0x00, // ICONDIR
        0x01,0x01, 0x00,0x00, 0x01,0x00, 0x20,0x00, // ICONDIRENTRY (1x1, 32bpp)
        0x30,0x00,0x00,0x00, 0x16,0x00,0x00,0x00,   // bytesInRes=48, offset=22
        // BITMAPINFOHEADER (40 bytes)
        0x28,0x00,0x00,0x00, // size=40
        0x01,0x00,0x00,0x00, // width=1
        0x02,0x00,0x00,0x00, // height=2 (XOR+AND)
        0x01,0x00,          // planes=1
        0x20,0x00,          // bitCount=32
        0x00,0x00,0x00,0x00, // compression=BI_RGB
        0x00,0x00,0x00,0x00, // sizeImage=0
        0x00,0x00,0x00,0x00, // XPelsPerMeter=0
        0x00,0x00,0x00,0x00, // YPelsPerMeter=0
        0x00,0x00,0x00,0x00, // ClrUsed=0
        0x00,0x00,0x00,0x00, // ClrImportant=0
        // XOR bitmap (BGRA): white opaque
        0xFF,0xFF,0xFF,0xFF,
        // AND mask (1 row, padded to 4 bytes): all zeros = visible
        0x00,0x00,0x00,0x00,
    ];
    if let Ok(mut f) = File::create(&path) {
        let _ = f.write_all(&ICO);
    }
}

fn main() {
    ensure_icon();
    tauri_build::build();
}
