export interface FileLoadOptions {
    name?: string;
    onProgress?: (loaded: number, total: number) => void;
    onSuccess?: (message: string) => void;
    onError?: (error: string) => void;
}
export interface FileLoadResult {
    success: boolean;
    message: string;
    path?: string;
}
export type JsonOp = any;
/**
 * Load a file into the engine from File object
 */
export declare function loadFile(file: File, options?: FileLoadOptions): Promise<FileLoadResult>;
/**
 * Load multiple files sequentially
 */
export declare function loadFiles(files: File[], options?: FileLoadOptions): Promise<FileLoadResult[]>;
/**
 * Load JSON operations from file
 */
export declare function loadJsonOpsFile(file: File, options?: FileLoadOptions): Promise<FileLoadResult>;
/**
 * Create file input element for model loading
 */
export declare function createModelFileInput(onLoad: (result: FileLoadResult) => void, options?: FileLoadOptions): HTMLInputElement;
/**
 * Create file input element for JSON operations
 */
export declare function createJsonFileInput(onLoad: (result: FileLoadResult) => void, options?: FileLoadOptions): HTMLInputElement;
/**
 * Handle drag and drop file loading
 */
export declare function setupDropZone(element: HTMLElement, onLoad: (results: FileLoadResult[]) => void, options?: FileLoadOptions): () => void;
//# sourceMappingURL=file-loader.d.ts.map